
// File: server.js
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');

const app = express();
app.use(bodyParser.json());

// ----------------------
// 1️⃣ MongoDB Connection
// ----------------------
mongoose.connect('mongodb://localhost:27017/bankDB', {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => console.log("✅ MongoDB connected successfully"))
.catch(err => console.error("❌ MongoDB connection error:", err));

// ----------------------
// 2️⃣ Define User Schema
// ----------------------
const userSchema = new mongoose.Schema({
  name: { type: String, required: true },
  balance: { type: Number, required: true, min: 0 }
});

const User = mongoose.model('User', userSchema);

// ----------------------
// 3️⃣ API Routes
// ----------------------

// 🧩 Route: Create User (for testing)
app.post('/create', async (req, res) => {
  try {
    const { name, balance } = req.body;

    if (balance < 0) {
      return res.status(400).json({ error: 'Balance cannot be negative' });
    }

    const newUser = new User({ name, balance });
    await newUser.save();

    res.json({ message: 'User created successfully', user: newUser });
  } catch (err) {
    res.status(500).json({ error: 'Error creating user', details: err.message });
  }
});

// 💰 Route: Transfer Money
app.post('/transfer', async (req, res) => {
  const { senderName, receiverName, amount } = req.body;

  try {
    // ✅ Step 1: Validate request data
    if (!senderName || !receiverName || !amount) {
      return res.status(400).json({ error: 'Missing required fields' });
    }
    if (amount <= 0) {
      return res.status(400).json({ error: 'Transfer amount must be positive' });
    }

    // ✅ Step 2: Fetch both accounts
    const sender = await User.findOne({ name: senderName });
    const receiver = await User.findOne({ name: receiverName });

    if (!sender) return res.status(404).json({ error: 'Sender account not found' });
    if (!receiver) return res.status(404).json({ error: 'Receiver account not found' });

    // ✅ Step 3: Check sufficient balance
    if (sender.balance < amount) {
      return res.status(400).json({ error: 'Insufficient balance in sender account' });
    }

    // ✅ Step 4: Sequential updates (no transactions)
    sender.balance -= amount;
    receiver.balance += amount;

    await sender.save();
    await receiver.save();

    res.json({
      message: '✅ Transfer successful',
      transferDetails: {
        from: senderName,
        to: receiverName,
        amount,
        senderBalance: sender.balance,
        receiverBalance: receiver.balance
      }
    });
  } catch (err) {
    console.error('Transfer failed:', err);
    res.status(500).json({ error: 'Internal server error', details: err.message });
  }
});

// 🧾 Route: Get All Users (for verification)
app.get('/users', async (req, res) => {
  const users = await User.find();
  res.json(users);
});

// ----------------------
// 4️⃣ Start Server
// ----------------------
const PORT = 3000;
app.listen(PORT, () => {
  console.log(`🚀 Server running on http://localhost:${PORT}`);
});
