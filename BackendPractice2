// server.js
const express = require("express");
const jwt = require("jsonwebtoken");
const bodyParser = require("body-parser");

const app = express();
app.use(bodyParser.json());

// Secret key for JWT
const SECRET_KEY = "bank_secret_key";

// Hardcoded user (for demo)
const USER = { username: "admin", password: "12345" };

// Dummy account balance (in-memory)
let accountBalance = 1000;

// ================================
// 1️⃣ Login Route (Generates Token)
// ================================
app.post("/login", (req, res) => {
  const { username, password } = req.body;

  if (username === USER.username && password === USER.password) {
    const token = jwt.sign({ username }, SECRET_KEY, { expiresIn: "1h" });
    return res.json({ message: "Login successful", token });
  }

  return res.status(401).json({ error: "Invalid username or password" });
});

// ===================================
// 2️⃣ Middleware to Verify JWT Token
// ===================================
function authenticateToken(req, res, next) {
  const authHeader = req.headers["authorization"];

  if (!authHeader) {
    return res.status(401).json({ error: "Authorization header missing" });
  }

  const token = authHeader.split(" ")[1];
  if (!token) {
    return res.status(401).json({ error: "Token not provided" });
  }

  jwt.verify(token, SECRET_KEY, (err, user) => {
    if (err) {
      return res.status(403).json({ error: "Invalid or expired token" });
    }
    req.user = user; // store user data in request
    next();
  });
}

// ================================
// 3️⃣ Protected Banking Endpoints
// ================================

// View balance
app.get("/balance", authenticateToken, (req, res) => {
  res.json({
    username: req.user.username,
    balance: accountBalance,
  });
});

// Deposit money
app.post("/deposit", authenticateToken, (req, res) => {
  const { amount } = req.body;

  if (!amount || amount <= 0) {
    return res.status(400).json({ error: "Invalid deposit amount" });
  }

  accountBalance += amount;
  res.json({
    message: `Deposited $${amount} successfully.`,
    newBalance: accountBalance,
  });
});

// Withdraw money
app.post("/withdraw", authenticateToken, (req, res) => {
  const { amount } = req.body;

  if (!amount || amount <= 0) {
    return res.status(400).json({ error: "Invalid withdrawal amount" });
  }

  if (amount > accountBalance) {
    return res.status(400).json({ error: "Insufficient balance" });
  }

  accountBalance -= amount;
  res.json({
    message: `Withdrew $${amount} successfully.`,
    remainingBalance: accountBalance,
  });
});

// ================================
// 4️⃣ Start Server
// ========================
